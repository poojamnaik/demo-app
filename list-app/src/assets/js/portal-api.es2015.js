!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=58)}([function(e,t,r){var n=r(10)("wks"),o=r(12),s=r(1).Symbol,a="function"==typeof s;(e.exports=function(e){return n[e]||(n[e]=a&&s[e]||(a?s:o)("Symbol."+e))}).store=n},function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(e,t,r){var n=r(6),o=r(22);e.exports=r(4)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},function(e,t,r){e.exports=!r(7)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(1),o=r(2),s=r(9),a=r(12)("src"),i=r(37),c=(""+i).split("toString");r(11).inspectSource=function(e){return i.call(e)},(e.exports=function(e,t,r,i){var l="function"==typeof r;l&&(s(r,"name")||o(r,"name",t)),e[t]!==r&&(l&&(s(r,a)||o(r,a,e[t]?""+e[t]:c.join(String(t)))),e===n?e[t]=r:i?e[t]?e[t]=r:o(e,t,r):(delete e[t],o(e,t,r)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||i.call(this)}))},function(e,t,r){var n=r(3),o=r(32),s=r(33),a=Object.defineProperty;t.f=r(4)?Object.defineProperty:function(e,t,r){if(n(e),t=s(t,!0),n(r),o)try{return a(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t,r){var n=r(11),o=r(1),s=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:r(20)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t){var r=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=r)},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+n).toString(36))}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports={}},function(e,t,r){var n=r(35),o=r(8);e.exports=function(e){return n(o(e))}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t,r){var n=r(10)("keys"),o=r(12);e.exports=function(e){return n[e]||(n[e]=o(e))}},function(e,t,r){"use strict";var n=r(3);e.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,r){for(var n=r(30),o=r(25),s=r(5),a=r(1),i=r(2),c=r(14),l=r(0),u=l("iterator"),f=l("toStringTag"),p=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(d),v=0;v<h.length;v++){var m,g=h[v],y=d[g],b=a[g],w=b&&b.prototype;if(w&&(w[u]||i(w,u,p),w[f]||i(w,f,g),c[g]=p,y))for(m in n)w[m]||s(w,m,n[m],!0)}},function(e,t){e.exports=!1},function(e,t,r){var n=r(13),o=r(1).document,s=n(o)&&n(o.createElement);e.exports=function(e){return s?o.createElement(e):{}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t,r){var n=r(1),o=r(11),s=r(2),a=r(5),i=r(38),c=function(e,t,r){var l,u,f,p,d=e&c.F,h=e&c.G,v=e&c.S,m=e&c.P,g=e&c.B,y=h?n:v?n[t]||(n[t]={}):(n[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(l in h&&(r=t),r)f=((u=!d&&y&&void 0!==y[l])?y:r)[l],p=g&&u?i(f,n):m&&"function"==typeof f?i(Function.call,f):f,y&&a(y,l,f,e&c.U),b[l]!=f&&s(b,l,p),m&&w[l]!=f&&(w[l]=f)};n.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,r){var n=r(43),o=r(27);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){var n=r(16),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,r){var n=r(6).f,o=r(9),s=r(0)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,s)&&n(e,s,{configurable:!0,value:t})}},function(e,t,r){"use strict";var n,o,s=r(18),a=RegExp.prototype.exec,i=String.prototype.replace,c=a,l=(n=/a/,o=/b*/g,a.call(n,"a"),a.call(o,"a"),0!==n.lastIndex||0!==o.lastIndex),u=void 0!==/()??/.exec("")[1];(l||u)&&(c=function(e){var t,r,n,o,c=this;return u&&(r=new RegExp("^"+c.source+"$(?!\\s)",s.call(c))),l&&(t=c.lastIndex),n=a.call(c,e),l&&n&&(c.lastIndex=c.global?n.index+n[0].length:t),u&&n&&n.length>1&&i.call(n[0],r,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n}),e.exports=c},function(e,t,r){"use strict";var n=r(31),o=r(34),s=r(14),a=r(15);e.exports=r(36)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])}),"values"),s.Arguments=s.Array,n("keys"),n("values"),n("entries")},function(e,t,r){var n=r(0)("unscopables"),o=Array.prototype;null==o[n]&&r(2)(o,n,{}),e.exports=function(e){o[n][e]=!0}},function(e,t,r){e.exports=!r(4)&&!r(7)((function(){return 7!=Object.defineProperty(r(21)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){var n=r(23);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},function(e,t,r){"use strict";var n=r(20),o=r(24),s=r(5),a=r(2),i=r(14),c=r(40),l=r(28),u=r(47),f=r(0)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};e.exports=function(e,t,r,h,v,m,g){c(r,t,h);var y,b,w,S=function(e){if(!p&&e in O)return O[e];switch(e){case"keys":case"values":return function(){return new r(this,e)}}return function(){return new r(this,e)}},k=t+" Iterator",x="values"==v,E=!1,O=e.prototype,C=O[f]||O["@@iterator"]||v&&O[v],M=C||S(v),T=v?x?S("entries"):M:void 0,A="Array"==t&&O.entries||C;if(A&&(w=u(A.call(new e)))!==Object.prototype&&w.next&&(l(w,k,!0),n||"function"==typeof w[f]||a(w,f,d)),x&&C&&"values"!==C.name&&(E=!0,M=function(){return C.call(this)}),n&&!g||!p&&!E&&O[f]||a(O,f,M),i[t]=M,i[k]=d,v)if(y={values:x?M:S("values"),keys:m?M:S("keys"),entries:T},g)for(b in y)b in O||s(O,b,y[b]);else o(o.P+o.F*(p||E),t,y);return y}},function(e,t,r){e.exports=r(10)("native-function-to-string",Function.toString)},function(e,t,r){var n=r(39);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,r){"use strict";var n=r(41),o=r(22),s=r(28),a={};r(2)(a,r(0)("iterator"),(function(){return this})),e.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),s(e,t+" Iterator")}},function(e,t,r){var n=r(3),o=r(42),s=r(27),a=r(17)("IE_PROTO"),i=function(){},c=function(){var e,t=r(21)("iframe"),n=s.length;for(t.style.display="none",r(46).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;n--;)delete c.prototype[s[n]];return c()};e.exports=Object.create||function(e,t){var r;return null!==e?(i.prototype=n(e),r=new i,i.prototype=null,r[a]=e):r=c(),void 0===t?r:o(r,t)}},function(e,t,r){var n=r(6),o=r(3),s=r(25);e.exports=r(4)?Object.defineProperties:function(e,t){o(e);for(var r,a=s(t),i=a.length,c=0;i>c;)n.f(e,r=a[c++],t[r]);return e}},function(e,t,r){var n=r(9),o=r(15),s=r(44)(!1),a=r(17)("IE_PROTO");e.exports=function(e,t){var r,i=o(e),c=0,l=[];for(r in i)r!=a&&n(i,r)&&l.push(r);for(;t.length>c;)n(i,r=t[c++])&&(~s(l,r)||l.push(r));return l}},function(e,t,r){var n=r(15),o=r(26),s=r(45);e.exports=function(e){return function(t,r,a){var i,c=n(t),l=o(c.length),u=s(a,l);if(e&&r!=r){for(;l>u;)if((i=c[u++])!=i)return!0}else for(;l>u;u++)if((e||u in c)&&c[u]===r)return e||u||0;return!e&&-1}}},function(e,t,r){var n=r(16),o=Math.max,s=Math.min;e.exports=function(e,t){return(e=n(e))<0?o(e+t,0):s(e,t)}},function(e,t,r){var n=r(1).document;e.exports=n&&n.documentElement},function(e,t,r){var n=r(9),o=r(48),s=r(17)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,s)?e[s]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,r){var n=r(8);e.exports=function(e){return Object(n(e))}},function(e,t,r){"use strict";var n=r(3),o=r(26),s=r(50),a=r(52);r(54)("match",1,(function(e,t,r,i){return[function(r){var n=e(this),o=null==r?void 0:r[t];return void 0!==o?o.call(r,n):new RegExp(r)[t](String(n))},function(e){var t=i(r,e,this);if(t.done)return t.value;var c=n(e),l=String(this);if(!c.global)return a(c,l);var u=c.unicode;c.lastIndex=0;for(var f,p=[],d=0;null!==(f=a(c,l));){var h=String(f[0]);p[d]=h,""===h&&(c.lastIndex=s(l,o(c.lastIndex),u)),d++}return 0===d?null:p}]}))},function(e,t,r){"use strict";var n=r(51)(!0);e.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},function(e,t,r){var n=r(16),o=r(8);e.exports=function(e){return function(t,r){var s,a,i=String(o(t)),c=n(r),l=i.length;return c<0||c>=l?e?"":void 0:(s=i.charCodeAt(c))<55296||s>56319||c+1===l||(a=i.charCodeAt(c+1))<56320||a>57343?e?i.charAt(c):s:e?i.slice(c,c+2):a-56320+(s-55296<<10)+65536}}},function(e,t,r){"use strict";var n=r(53),o=RegExp.prototype.exec;e.exports=function(e,t){var r=e.exec;if("function"==typeof r){var s=r.call(e,t);if("object"!=typeof s)throw new TypeError("RegExp exec method returned something other than an Object or null");return s}if("RegExp"!==n(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,r){var n=r(23),o=r(0)("toStringTag"),s="Arguments"==n(function(){return arguments}());e.exports=function(e){var t,r,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?r:s?n(t):"Object"==(a=n(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,r){"use strict";r(55);var n=r(5),o=r(2),s=r(7),a=r(8),i=r(0),c=r(29),l=i("species"),u=!s((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();e.exports=function(e,t,r){var p=i(e),d=!s((function(){var t={};return t[p]=function(){return 7},7!=""[e](t)})),h=d?!s((function(){var t=!1,r=/a/;return r.exec=function(){return t=!0,null},"split"===e&&(r.constructor={},r.constructor[l]=function(){return r}),r[p](""),!t})):void 0;if(!d||!h||"replace"===e&&!u||"split"===e&&!f){var v=/./[p],m=r(a,p,""[e],(function(e,t,r,n,o){return t.exec===c?d&&!o?{done:!0,value:v.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}})),g=m[0],y=m[1];n(String.prototype,e,g),o(RegExp.prototype,p,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,r){"use strict";var n=r(29);r(24)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(e,t,r){"use strict";r(57);var n=r(3),o=r(18),s=r(4),a=/./.toString,i=function(e){r(5)(RegExp.prototype,"toString",e,!0)};r(7)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?i((function(){var e=n(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?o.call(e):void 0)})):"toString"!=a.name&&i((function(){return a.call(this)}))},function(e,t,r){r(4)&&"g"!=/./g.flags&&r(6).f(RegExp.prototype,"flags",{configurable:!0,get:r(18)})},function(e,t,r){"use strict";r.r(t);r(19);class n{constructor(){this.callbackMap=new Map}add(e,t){this.callbackMap.has(e)?this.callbackMap.get(e).add(t):this.callbackMap.set(e,new Set([t]))}has(e){return this.get(e).size>0}get(e){return this.callbackMap.get(e)||new Set}hasAny(){return[...this.callbackMap.values()].some(e=>e.size>0)}call(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];(this.callbackMap.get(e)||new Set).forEach(e=>e.apply(this,r))}delete(e,t){this.remove(e,t),this.has(e)&&this.callbackMap.delete(e)}remove(e,t){t&&this.callbackMap.has(e)?this.callbackMap.get(e).delete(t):e&&this.callbackMap.has(e)?this.callbackMap.get(e).clear():this.callbackMap.clear()}removed(){return[...this.callbackMap.entries()].reduce((e,t)=>{var[r,n]=t;return 0===n.size&&e.push(r),e},[])}purgeRemoved(){this.removed().forEach(e=>this.callbackMap.delete(e))}purge(){this.callbackMap.clear(),this.callbackMap=new Map}}r(49);function o(e,t){if("string"!=typeof t)throw new Error("Called '".concat(e,"' with key: '").concat(t,"' of invalid type: '").concat(typeof t,"'. It should be a string"));return!0}function s(e,t){var r=t.match(/\./g);if(!r)throw new Error("Called 'Portal.".concat(e,"' with key: '").concat(t,"' but it must include a namespace in the form namespace.key"));if(r.length>1)throw new Error("Called 'Portal.".concat(e,"' with key: '").concat(t,"' nesting not allowed, namespace must be in the form namespace.key"));return!0}r(56);
/*!
 * css-vars-ponyfill
 * v2.3.1
 * https://jhildenbiddle.github.io/css-vars-ponyfill/
 * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */
function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function i(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return c(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}
/*!
 * get-css-data
 * v1.8.0
 * https://github.com/jhildenbiddle/get-css-data
 * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>
 * MIT license
 */()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function l(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={mimeType:t.mimeType||null,onBeforeSend:t.onBeforeSend||Function.prototype,onSuccess:t.onSuccess||Function.prototype,onError:t.onError||Function.prototype,onComplete:t.onComplete||Function.prototype},n=Array.isArray(e)?e:[e],o=Array.apply(null,Array(n.length)).map((function(e){return null}));function s(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t="<"===e.trim().charAt(0);return!t}function a(e,t){r.onError(e,n[t],t)}function i(e,t){var s=r.onSuccess(e,n[t],t);e=!1===s?"":s||e,o[t]=e,-1===o.indexOf(null)&&r.onComplete(o)}var c=document.createElement("a");n.forEach((function(e,t){if(c.setAttribute("href",e),c.href=String(c.href),Boolean(document.all&&!window.atob)&&c.host.split(":")[0]!==location.host.split(":")[0]){if(c.protocol===location.protocol){var n=new XDomainRequest;n.open("GET",e),n.timeout=0,n.onprogress=Function.prototype,n.ontimeout=Function.prototype,n.onload=function(){s(n.responseText)?i(n.responseText,t):a(n,t)},n.onerror=function(e){a(n,t)},setTimeout((function(){n.send()}),0)}else console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(e,")")),a(null,t)}else{var o=new XMLHttpRequest;o.open("GET",e),r.mimeType&&o.overrideMimeType&&o.overrideMimeType(r.mimeType),r.onBeforeSend(o,e,t),o.onreadystatechange=function(){4===o.readyState&&(200===o.status&&s(o.responseText)?i(o.responseText,t):a(o,t))},o.send()}}))}
/**
 * Gets CSS data from <style> and <link> nodes (including @imports), then
 * returns data in order processed by DOM. Allows specifying nodes to
 * include/exclude and filtering CSS data using RegEx.
 *
 * @preserve
 * @param {object}   [options] The options object
 * @param {object}   [options.rootElement=document] Root element to traverse for
 *                   <link> and <style> nodes.
 * @param {string}   [options.include] CSS selector matching <link> and <style>
 *                   nodes to include
 * @param {string}   [options.exclude] CSS selector matching <link> and <style>
 *                   nodes to exclude
 * @param {object}   [options.filter] Regular expression used to filter node CSS
 *                   data. Each block of CSS data is tested against the filter,
 *                   and only matching data is included.
 * @param {boolean}  [options.skipDisabled=true] Determines if disabled
 *                   stylesheets will be skipped while collecting CSS data.
 * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be
 *                   collected from a stylesheet's runtime values instead of its
 *                   text content. This is required to get accurate CSS data
 *                   when a stylesheet has been modified using the deleteRule()
 *                   or insertRule() methods because these modifications will
 *                   not be reflected in the stylesheet's text content.
 * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
 *                   1) the XHR object, 2) source node reference, and 3) the
 *                   source URL as arguments.
 * @param {function} [options.onSuccess] Callback on each CSS node read. Passes
 *                   1) CSS text, 2) source node reference, and 3) the source
 *                   URL as arguments.
 * @param {function} [options.onError] Callback on each error. Passes 1) the XHR
 *                   object for inspection, 2) soure node reference, and 3) the
 *                   source URL that failed (either a <link> href or an @import)
 *                   as arguments
 * @param {function} [options.onComplete] Callback after all nodes have been
 *                   processed. Passes 1) concatenated CSS text, 2) an array of
 *                   CSS text in DOM order, and 3) an array of nodes in DOM
 *                   order as arguments.
 *
 * @example
 *
 *   getCssData({
 *     rootElement : document,
 *     include     : 'style,link[rel="stylesheet"]',
 *     exclude     : '[href="skip.css"]',
 *     filter      : /red/,
 *     skipDisabled: true,
 *     useCSSOM    : false,
 *     onBeforeSend(xhr, node, url) {
 *       // ...
 *     }
 *     onSuccess(cssText, node, url) {
 *       // ...
 *     }
 *     onError(xhr, node, url) {
 *       // ...
 *     },
 *     onComplete(cssText, cssArray, nodeArray) {
 *       // ...
 *     }
 *   });
 */function u(e){var t=/\/\*[\s\S]+?\*\//g,r=/(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g,n={rootElement:e.rootElement||document,include:e.include||'style,link[rel="stylesheet"]',exclude:e.exclude||null,filter:e.filter||null,skipDisabled:!1!==e.skipDisabled,useCSSOM:e.useCSSOM||!1,onBeforeSend:e.onBeforeSend||Function.prototype,onSuccess:e.onSuccess||Function.prototype,onError:e.onError||Function.prototype,onComplete:e.onComplete||Function.prototype},o=Array.apply(null,n.rootElement.querySelectorAll(n.include)).filter((function(e){return t=e,r=n.exclude,!(t.matches||t.matchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector).call(t,r);var t,r})),s=Array.apply(null,Array(o.length)).map((function(e){return null}));function a(){if(-1===s.indexOf(null)){var e=s.join("");n.onComplete(e,s,o)}}function i(e,t,r,o){var i=n.onSuccess(e,r,o);(function e(t,r,o,s){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[],i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[],u=c(t,o,i);u.rules.length?l(u.absoluteUrls,{onBeforeSend:function(e,t,o){n.onBeforeSend(e,r,t)},onSuccess:function(e,t,o){var s=n.onSuccess(e,r,t),a=c(e=!1===s?"":s||e,t,i);return a.rules.forEach((function(t,r){e=e.replace(t,a.absoluteRules[r])})),e},onError:function(n,c,l){a.push({xhr:n,url:c}),i.push(u.rules[l]),e(t,r,o,s,a,i)},onComplete:function(n){n.forEach((function(e,r){t=t.replace(u.rules[r],e)})),e(t,r,o,s,a,i)}}):s(t,a)})(e=void 0!==i&&!1===Boolean(i)?"":i||e,r,o,(function(e,o){null===s[t]&&(o.forEach((function(e){return n.onError(e.xhr,r,e.url)})),!n.filter||n.filter.test(e)?s[t]=e:s[t]="",a())}))}function c(e,n){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],s={};return s.rules=(e.replace(t,"").match(r)||[]).filter((function(e){return-1===o.indexOf(e)})),s.urls=s.rules.map((function(e){return e.replace(r,"$1")})),s.absoluteUrls=s.urls.map((function(e){return f(e,n)})),s.absoluteRules=s.rules.map((function(e,t){var r=s.urls[t],o=f(s.absoluteUrls[t],n);return e.replace(r,o)})),s}o.length?o.forEach((function(e,t){var r=e.getAttribute("href"),o=e.getAttribute("rel"),c="LINK"===e.nodeName&&r&&o&&-1!==o.toLowerCase().indexOf("stylesheet"),u=!1!==n.skipDisabled&&e.disabled,p="STYLE"===e.nodeName;if(c&&!u)l(r,{mimeType:"text/css",onBeforeSend:function(t,r,o){n.onBeforeSend(t,e,r)},onSuccess:function(n,o,s){var a=f(r);i(n,t,e,a)},onError:function(r,o,i){s[t]="",n.onError(r,e,o),a()}});else if(p&&!u){var d=e.textContent;n.useCSSOM&&(d=Array.apply(null,e.sheet.cssRules).map((function(e){return e.cssText})).join("")),i(d,t,e,location.href)}else s[t]="",a()})):n.onComplete("",[])}function f(e,t){var r=document.implementation.createHTMLDocument(""),n=r.createElement("base"),o=r.createElement("a");return r.head.appendChild(n),r.body.appendChild(o),n.href=t||document.baseURI||(document.querySelector("base")||{}).href||location.href,o.href=e,o.href}var p=d;function d(e,t,r){e instanceof RegExp&&(e=h(e,r)),t instanceof RegExp&&(t=h(t,r));var n=v(e,t,r);return n&&{start:n[0],end:n[1],pre:r.slice(0,n[0]),body:r.slice(n[0]+e.length,n[1]),post:r.slice(n[1]+t.length)}}function h(e,t){var r=t.match(e);return r?r[0]:null}function v(e,t,r){var n,o,s,a,i,c=r.indexOf(e),l=r.indexOf(t,c+1),u=c;if(c>=0&&l>0){for(n=[],s=r.length;u>=0&&!i;)u==c?(n.push(u),c=r.indexOf(e,u+1)):1==n.length?i=[n.pop(),l]:((o=n.pop())<s&&(s=o,a=l),l=r.indexOf(t,u+1)),u=c<l&&c>=0?c:l;n.length&&(i=[s,a])}return i}function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={preserveStatic:!0,removeComments:!1},n=a({},r,t),o=[];function s(e){throw new Error("CSS parse error: ".concat(e))}function i(t){var r=t.exec(e);if(r)return e=e.slice(r[0].length),r}function c(){return i(/^{\s*/)}function l(){return i(/^}/)}function u(){i(/^\s*/)}function f(){if(u(),"/"===e[0]&&"*"===e[1]){for(var t=2;e[t]&&("*"!==e[t]||"/"!==e[t+1]);)t++;if(!e[t])return s("end of comment is missing");var r=e.slice(2,t);return e=e.slice(t+2),{type:"comment",comment:r}}}function d(){for(var e,t=[];e=f();)t.push(e);return n.removeComments?[]:t}function h(){for(u();"}"===e[0];)s("extra closing bracket");var t=i(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);if(t)return t[0].trim().replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,(function(e){return e.replace(/,/g,"â")})).split(/\s*(?![^(]*\)),\s*/).map((function(e){return e.replace(/\u200C/g,",")}))}function v(){if("@"===e[0])return T();i(/^([;\s]*)+/);var t=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,r=i(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);if(r){if(r=r[0].trim(),!i(/^:\s*/))return s("property missing ':'");var n=i(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/),o={type:"declaration",property:r.replace(t,""),value:n?n[0].replace(t,"").trim():""};return i(/^[;\s]*/),o}}function m(){if(!c())return s("missing '{'");for(var e,t=d();e=v();)t.push(e),t=t.concat(d());return l()?t:s("missing '}'")}function g(){u();for(var e,t=[];e=i(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)t.push(e[1]),i(/^,\s*/);if(t.length)return{type:"keyframe",values:t,declarations:m()}}function y(){var e=i(/^@([-\w]+)?keyframes\s*/);if(e){var t=e[1];if(!(e=i(/^([-\w]+)\s*/)))return s("@keyframes missing name");var r,n=e[1];if(!c())return s("@keyframes missing '{'");for(var o=d();r=g();)o.push(r),o=o.concat(d());return l()?{type:"keyframes",name:n,vendor:t,keyframes:o}:s("@keyframes missing '}'")}}function b(){if(i(/^@page */))return{type:"page",selectors:h()||[],declarations:m()}}function w(){var e=i(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\s*/);if(e)return{type:"page-margin-box",name:"".concat(e[1],"-").concat(e[2])+(e[3]?"-".concat(e[3]):""),declarations:m()}}function S(){if(i(/^@font-face\s*/))return{type:"font-face",declarations:m()}}function k(){var e=i(/^@supports *([^{]+)/);if(e)return{type:"supports",supports:e[1].trim(),rules:j()}}function x(){if(i(/^@host\s*/))return{type:"host",rules:j()}}function E(){var e=i(/^@media([^{]+)*/);if(e)return{type:"media",media:(e[1]||"").trim(),rules:j()}}function O(){var e=i(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);if(e)return{type:"custom-media",name:e[1].trim(),media:e[2].trim()}}function C(){var e=i(/^@([-\w]+)?document *([^{]+)/);if(e)return{type:"document",document:e[2].trim(),vendor:e[1]?e[1].trim():null,rules:j()}}function M(){var e=i(/^@(import|charset|namespace)\s*([^;]+);/);if(e)return{type:e[1],name:e[2].trim()}}function T(){if(u(),"@"===e[0]){var t=M()||S()||E()||y()||k()||C()||O()||x()||b()||w();if(t&&!n.preserveStatic){var r=!1;if(t.declarations)r=t.declarations.some((function(e){return/var\(/.test(e.value)}));else r=(t.keyframes||t.rules||[]).some((function(e){return(e.declarations||[]).some((function(e){return/var\(/.test(e.value)}))}));return r?t:{}}return t}}function A(){if(!n.preserveStatic){var t=p("{","}",e);if(t){var r=/:(?:root|host)(?![.:#(])/.test(t.pre)&&/--\S*\s*:/.test(t.body),o=/var\(/.test(t.body);if(!r&&!o)return e=e.slice(t.end+1),{}}}var a=h()||[],i=n.preserveStatic?m():m().filter((function(e){var t=a.some((function(e){return/:(?:root|host)(?![.:#(])/.test(e)}))&&/^--\S/.test(e.property),r=/var\(/.test(e.value);return t||r}));return a.length||s("selector missing"),{type:"rule",selectors:a,declarations:i}}function j(t){if(!t&&!c())return s("missing '{'");for(var r,n=d();e.length&&(t||"}"!==e[0])&&(r=T()||A());)r.type&&n.push(r),n=n.concat(d());return t||l()?n:s("missing '}'")}return{type:"stylesheet",stylesheet:{rules:j(!0),errors:o}}}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={parseHost:!1,store:{},onWarning:function(){}},n=a({},r,t),o=new RegExp(":".concat(n.parseHost?"host":"root","$"));return"string"==typeof e&&(e=m(e,n)),e.stylesheet.rules.forEach((function(e){"rule"===e.type&&e.selectors.some((function(e){return o.test(e)}))&&e.declarations.forEach((function(e,t){var r=e.property,o=e.value;r&&0===r.indexOf("--")&&(n.store[r]=o)}))})),n.store}function y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0,n={charset:function(e){return"@charset "+e.name+";"},comment:function(e){return 0===e.comment.indexOf("__CSSVARSPONYFILL")?"/*"+e.comment+"*/":""},"custom-media":function(e){return"@custom-media "+e.name+" "+e.media+";"},declaration:function(e){return e.property+":"+e.value+";"},document:function(e){return"@"+(e.vendor||"")+"document "+e.document+"{"+o(e.rules)+"}"},"font-face":function(e){return"@font-face{"+o(e.declarations)+"}"},host:function(e){return"@host{"+o(e.rules)+"}"},import:function(e){return"@import "+e.name+";"},keyframe:function(e){return e.values.join(",")+"{"+o(e.declarations)+"}"},keyframes:function(e){return"@"+(e.vendor||"")+"keyframes "+e.name+"{"+o(e.keyframes)+"}"},media:function(e){return"@media "+e.media+"{"+o(e.rules)+"}"},namespace:function(e){return"@namespace "+e.name+";"},page:function(e){return"@page "+(e.selectors.length?e.selectors.join(", "):"")+"{"+o(e.declarations)+"}"},"page-margin-box":function(e){return"@"+e.name+"{"+o(e.declarations)+"}"},rule:function(e){var t=e.declarations;if(t.length)return e.selectors.join(",")+"{"+o(t)+"}"},supports:function(e){return"@supports "+e.supports+"{"+o(e.rules)+"}"}};function o(e){for(var o="",s=0;s<e.length;s++){var a=e[s];r&&r(a);var i=n[a.type](a);i&&(o+=i,i.length&&a.selectors&&(o+=t))}return o}return o(e.stylesheet.rules)}function b(e,t){e.rules.forEach((function(r){r.rules?b(r,t):r.keyframes?r.keyframes.forEach((function(e){"keyframe"===e.type&&t(e.declarations,r)})):r.declarations&&t(r.declarations,e)}))}d.range=v;function w(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={preserveStatic:!0,preserveVars:!1,variables:{},onWarning:function(){}},n=a({},r,t);return"string"==typeof e&&(e=m(e,n)),b(e.stylesheet,(function(e,t){for(var r=0;r<e.length;r++){var o=e[r],s=o.type,a=o.property,i=o.value;if("declaration"===s)if(n.preserveVars||!a||0!==a.indexOf("--")){if(-1!==i.indexOf("var(")){var c=k(i,n);c!==o.value&&(c=S(c),n.preserveVars?(e.splice(r,0,{type:s,property:a,value:c}),r++):o.value=c)}}else e.splice(r,1),r--}})),y(e)}function S(e){return(e.match(/calc\(([^)]+)\)/g)||[]).forEach((function(t){var r="calc".concat(t.split("calc").join(""));e=e.replace(t,r)})),e}function k(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0;if(-1===e.indexOf("var("))return e;var n=p("(",")",e);function o(e){var n=e.split(",")[0].replace(/[\s\n\t]/g,""),o=(e.match(/(?:\s*,\s*){1}(.*)?/)||[])[1],s=Object.prototype.hasOwnProperty.call(t.variables,n)?String(t.variables[n]):void 0,a=s||(o?String(o):void 0),i=r||e;return s||t.onWarning('variable "'.concat(n,'" is undefined')),a&&"undefined"!==a&&a.length>0?k(a,t,i):"var(".concat(i,")")}if(n){if("var"===n.pre.slice(-3)){var s=0===n.body.trim().length;return s?(t.onWarning("var() must contain a non-whitespace string"),e):n.pre.slice(0,-3)+o(n.body)+k(n.post,t)}return n.pre+"(".concat(k(n.body,t),")")+k(n.post,t)}return-1!==e.indexOf("var(")&&t.onWarning('missing closing ")" in the value "'.concat(e,'"')),e}var x="undefined"!=typeof window,E=x&&window.CSS&&window.CSS.supports&&window.CSS.supports("(--a: 0)"),O={group:0,job:0},C={rootElement:x?document:null,shadowDOM:!1,include:"style,link[rel=stylesheet]",exclude:"",variables:{},onlyLegacy:!0,preserveStatic:!0,preserveVars:!1,silent:!1,updateDOM:!0,updateURLs:!0,watch:null,onBeforeSend:function(){},onError:function(){},onWarning:function(){},onSuccess:function(){},onComplete:function(){},onFinally:function(){}},M={cssComments:/\/\*[\s\S]+?\*\//g,cssKeyframes:/@(?:-\w*-)?keyframes/,cssMediaQueries:/@media[^{]+\{([\s\S]+?})\s*}/g,cssUrls:/url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,cssVarDeclRules:/(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^}]*})/g,cssVarDecls:/(?:[\s;]*)(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*);/g,cssVarFunc:/var\(\s*--[\w-]/,cssVars:/(?:(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/},T={dom:{},job:{},user:{}},A=!1,j=null,L=0,_=null,R=!1;
/**
 * Fetches, parses, and transforms CSS custom properties from specified
 * <style> and <link> elements into static values, then appends a new <style>
 * element with static values to the DOM to provide CSS custom property
 * compatibility for legacy browsers. Also provides a single interface for
 * live updates of runtime values in both modern and legacy browsers.
 *
 * @preserve
 * @param {object}   [options] Options object
 * @param {object}   [options.rootElement=document] Root element to traverse for
 *                   <link> and <style> nodes
 * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>
 *                   and <style> nodes will be processed.
 * @param {string}   [options.include="style,link[rel=stylesheet]"] CSS selector
 *                   matching <link re="stylesheet"> and <style> nodes to
 *                   process
 * @param {string}   [options.exclude] CSS selector matching <link
 *                   rel="stylehseet"> and <style> nodes to exclude from those
 *                   matches by options.include
 * @param {object}   [options.variables] A map of custom property name/value
 *                   pairs. Property names can omit or include the leading
 *                   double-hyphen (â), and values specified will override
 *                   previous values
 * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will
 *                   only generate legacy-compatible CSS in browsers that lack
 *                   native support (i.e., legacy browsers)
 * @param {boolean}  [options.preserveStatic=true] Determines if CSS
 *                   declarations that do not reference a custom property will
 *                   be preserved in the transformed CSS
 * @param {boolean}  [options.preserveVars=false] Determines if CSS custom
 *                   property declarations will be preserved in the transformed
 *                   CSS
 * @param {boolean}  [options.silent=false] Determines if warning and error
 *                   messages will be displayed on the console
 * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will
 *                   update the DOM after processing CSS custom properties
 * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will
 *                   convert relative url() paths to absolute urls
 * @param {boolean}  [options.watch=false] Determines if a MutationObserver will
 *                   be created that will execute the ponyfill when a <link> or
 *                   <style> DOM mutation is observed
 * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
 *                   1) the XHR object, 2) source node reference, and 3) the
 *                   source URL as arguments
 * @param {function} [options.onError] Callback after a CSS parsing error has
 *                   occurred or an XHR request has failed. Passes 1) an error
 *                   message, and 2) source node reference, 3) xhr, and 4 url as
 *                   arguments.
 * @param {function} [options.onWarning] Callback after each CSS parsing warning
 *                   has occurred. Passes 1) a warning message as an argument.
 * @param {function} [options.onSuccess] Callback after CSS data has been
 *                   collected from each node and before CSS custom properties
 *                   have been transformed. Allows modifying the CSS data before
 *                   it is transformed by returning any string value (or false
 *                   to skip). Passes 1) CSS text, 2) source node reference, and
 *                   3) the source URL as arguments.
 * @param {function} [options.onComplete] Callback after all CSS has been
 *                   processed, legacy-compatible CSS has been generated, and
 *                   (optionally) the DOM has been updated. Passes 1) a CSS
 *                   string with CSS variable values resolved, 2) an array of
 *                   output <style> node references that have been appended to
 *                   the DOM, 3) an object containing all custom properies names
 *                   and values, and 4) the ponyfill execution time in
 *                   milliseconds.
 * @param {function} [options.onFinally] Callback in modern and legacy browsers
 *                   after the ponyfill has finished all tasks. Passes 1) a
 *                   boolean indicating if the last ponyfill call resulted in a
 *                   style change, 2) a boolean indicating if the current
 *                   browser provides native support for CSS custom properties,
 *                   and 3) the ponyfill execution time in milliseconds.
 * @example
 *
 *   cssVars({
 *     rootElement   : document,
 *     shadowDOM     : false,
 *     include       : 'style,link[rel="stylesheet"]',
 *     exclude       : '',
 *     variables     : {},
 *     onlyLegacy    : true,
 *     preserveStatic: true,
 *     preserveVars  : false,
 *     silent        : false,
 *     updateDOM     : true,
 *     updateURLs    : true,
 *     watch         : false,
 *     onBeforeSend(xhr, node, url) {},
 *     onError(message, node, xhr, url) {},
 *     onWarning(message) {},
 *     onSuccess(cssText, node, url) {},
 *     onComplete(cssText, styleNode, cssVariables, benchmark) {},
 *     onFinally(hasChanged, hasNativeSupport, benchmark)
 *   });
 */
function P(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t="cssVars(): ",r=a({},C,e);function n(e,n,o,s){!r.silent&&window.console&&console.error("".concat(t).concat(e,"\n"),n),r.onError(e,n,o,s)}function o(e){!r.silent&&window.console&&console.warn("".concat(t).concat(e)),r.onWarning(e)}function s(e){r.onFinally(Boolean(e),E,U()-r.__benchmark)}if(x){if(r.watch)return r.watch=C.watch,F(r),void P(r);if(!1===r.watch&&j&&(j.disconnect(),j=null),!r.__benchmark){if(A===r.rootElement)return void D(e);if(r.__benchmark=U(),r.exclude=[j?'[data-cssvars]:not([data-cssvars=""])':'[data-cssvars="out"]',r.exclude].filter((function(e){return e})).join(","),r.variables=I(r.variables),!j){var c=Array.apply(null,r.rootElement.querySelectorAll('[data-cssvars="out"]'));if(c.forEach((function(e){var t=e.getAttribute("data-cssvars-group");(t?r.rootElement.querySelector('[data-cssvars="src"][data-cssvars-group="'.concat(t,'"]')):null)||e.parentNode.removeChild(e)})),L){var l=r.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])');l.length<L&&(L=l.length,T.dom={})}}}if("loading"!==document.readyState)if(E&&r.onlyLegacy){var f=!1;if(r.updateDOM){var p=r.rootElement.host||(r.rootElement===document?document.documentElement:r.rootElement);Object.keys(r.variables).forEach((function(e){var t=r.variables[e];f=f||t!==getComputedStyle(p).getPropertyValue(e),p.style.setProperty(e,t)}))}s(f)}else!R&&(r.shadowDOM||r.rootElement.shadowRoot||r.rootElement.host)?u({rootElement:C.rootElement,include:C.include,exclude:r.exclude,skipDisabled:!1,onSuccess:function(e,t,r){return(e=((e=e.replace(M.cssComments,"").replace(M.cssMediaQueries,"")).match(M.cssVarDeclRules)||[]).join(""))||!1},onComplete:function(e,t,n){g(e,{store:T.dom,onWarning:o}),R=!0,P(r)}}):(A=r.rootElement,u({rootElement:r.rootElement,include:r.include,exclude:r.exclude,skipDisabled:!1,onBeforeSend:r.onBeforeSend,onError:function(e,t,r){var o=e.responseURL||B(r,location.href),s=e.statusText?"(".concat(e.statusText,")"):"Unspecified Error"+(0===e.status?" (possibly CORS related)":"");n("CSS XHR Error: ".concat(o," ").concat(e.status," ").concat(s),t,e,o)},onSuccess:function(e,t,n){var o=r.onSuccess(e,t,n);return e=void 0!==o&&!1===Boolean(o)?"":o||e,r.updateURLs&&(e=N(e,n)),e},onComplete:function(e,t){var c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],l=a({},T.dom,T.user);if(T.job={},c.forEach((function(e,s){var a=t[s];if(M.cssVars.test(a))try{var i=m(a,{preserveStatic:r.preserveStatic,removeComments:!0});g(i,{parseHost:Boolean(r.rootElement.host),store:T.dom,onWarning:o}),e.__cssVars={tree:i}}catch(t){n(t.message,e)}})),a(T.job,T.dom),r.updateDOM?(a(T.user,r.variables),a(T.job,T.user)):(a(T.job,T.user,r.variables),a(l,r.variables)),O.job>0&&Boolean(Object.keys(T.job).length>Object.keys(l).length||Boolean(Object.keys(l).length&&Object.keys(T.job).some((function(e){return T.job[e]!==l[e]})))))W(r.rootElement),P(r);else{var u=[],f=[],p=!1;if(r.updateDOM&&O.job++,c.forEach((function(e,s){var i=!e.__cssVars;if(e.__cssVars)try{w(e.__cssVars.tree,a({},r,{variables:T.job,onWarning:o}));var c=y(e.__cssVars.tree);if(r.updateDOM){var l=t[s],d=M.cssVarFunc.test(l);if(e.getAttribute("data-cssvars")||e.setAttribute("data-cssvars","src"),c.length&&d){var h=e.getAttribute("data-cssvars-group")||++O.group,v=c.replace(/\s/g,""),m=r.rootElement.querySelector('[data-cssvars="out"][data-cssvars-group="'.concat(h,'"]'))||document.createElement("style");p=p||M.cssKeyframes.test(c),r.preserveStatic&&(e.sheet.disabled=!0),m.hasAttribute("data-cssvars")||m.setAttribute("data-cssvars","out"),v===e.textContent.replace(/\s/g,"")?(i=!0,m&&m.parentNode&&(e.removeAttribute("data-cssvars-group"),m.parentNode.removeChild(m))):v!==m.textContent.replace(/\s/g,"")&&([e,m].forEach((function(e){e.setAttribute("data-cssvars-job",O.job),e.setAttribute("data-cssvars-group",h)})),m.textContent=c,u.push(c),f.push(m),m.parentNode||e.parentNode.insertBefore(m,e.nextSibling))}}else e.textContent.replace(/\s/g,"")!==c&&u.push(c)}catch(t){n(t.message,e)}i&&e.setAttribute("data-cssvars","skip"),e.hasAttribute("data-cssvars-job")||e.setAttribute("data-cssvars-job",O.job)})),L=r.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])').length,r.shadowDOM)for(var d,h=[r.rootElement].concat(i(r.rootElement.querySelectorAll("*"))),v=0;d=h[v];++v)if(d.shadowRoot&&d.shadowRoot.querySelector("style")){var b=a({},r,{rootElement:d.shadowRoot});P(b)}r.updateDOM&&p&&V(r.rootElement),A=!1,r.onComplete(u.join(""),f,JSON.parse(JSON.stringify(T.job)),U()-r.__benchmark),s(f.length)}}}));else document.addEventListener("DOMContentLoaded",(function t(r){P(e),document.removeEventListener("DOMContentLoaded",t)}))}}function F(e){function t(e){var t=e.hasAttribute("disabled"),r=(e.sheet||{}).disabled;return t||r}function r(e){return"LINK"===e.tagName&&-1!==(e.getAttribute("rel")||"").indexOf("stylesheet")&&!t(e)}function n(e){return Array.apply(null,e).some((function(e){var n=1===e.nodeType&&e.hasAttribute("data-cssvars"),o=function(e){return"STYLE"===e.tagName&&!t(e)}(e)&&M.cssVars.test(e.textContent);return!n&&(r(e)||o)}))}window.MutationObserver&&(j&&(j.disconnect(),j=null),(j=new MutationObserver((function(t){t.some((function(t){var o,s=!1;return"attributes"===t.type?s=r(t.target):"childList"===t.type&&(s=n(t.addedNodes)||(o=t.removedNodes,Array.apply(null,o).some((function(t){var r=1===t.nodeType,n=r&&"out"===t.getAttribute("data-cssvars"),o=r&&"src"===t.getAttribute("data-cssvars"),s=o;if(o||n){var a=t.getAttribute("data-cssvars-group"),i=e.rootElement.querySelector('[data-cssvars-group="'.concat(a,'"]'));o&&(W(e.rootElement),T.dom={}),i&&i.parentNode.removeChild(i)}return s})))),s}))&&P(e)}))).observe(document.documentElement,{attributes:!0,attributeFilter:["disabled","href"],childList:!0,subtree:!0}))}function D(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;clearTimeout(_),_=setTimeout((function(){e.__benchmark=null,P(e)}),t)}function V(e){var t=["animation-name","-moz-animation-name","-webkit-animation-name"].filter((function(e){return getComputedStyle(document.body)[e]}))[0];if(t){for(var r=e.getElementsByTagName("*"),n=[],o=0,s=r.length;o<s;o++){var a=r[o];"none"!==getComputedStyle(a)[t]&&(a.style[t]+="__CSSVARSPONYFILL-KEYFRAMES__",n.push(a))}document.body.offsetHeight;for(var i=0,c=n.length;i<c;i++){var l=n[i].style;l[t]=l[t].replace("__CSSVARSPONYFILL-KEYFRAMES__","")}}}function N(e,t){return(e.replace(M.cssComments,"").match(M.cssUrls)||[]).forEach((function(r){var n=r.replace(M.cssUrls,"$1"),o=B(n,t);e=e.replace(r,r.replace(n,o))})),e}function I(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=/^-{2}/;return Object.keys(e).reduce((function(r,n){return r[t.test(n)?n:"--".concat(n.replace(/^-+/,""))]=e[n],r}),{})}function B(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:location.href,r=document.implementation.createHTMLDocument(""),n=r.createElement("base"),o=r.createElement("a");return r.head.appendChild(n),r.body.appendChild(o),n.href=t,o.href=e,o.href}function U(){return x&&(window.performance||{}).now?window.performance.now():(new Date).getTime()}function W(e){Array.apply(null,e.querySelectorAll('[data-cssvars="skip"],[data-cssvars="src"]')).forEach((function(e){return e.setAttribute("data-cssvars","")}))}P.reset=function(){for(var e in O.job=0,O.group=0,A=!1,j&&(j.disconnect(),j=null),L=0,_=null,R=!1,T)T[e]={}};var q=P;var H,z,G=new n,Y=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r;this.callbacks=e,this.window=t,this.parent=r,this.window.addEventListener("message",this.handleMessage.bind(this))}handleMessage(e){var{data:t}=e;this.callbacks.call(t.type,t.payload||{})}onMessageType(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.callbacks.add(e,(function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.apply(r,[...n])}))}send(e,t){t&&"object"==typeof t&&(t=JSON.parse(JSON.stringify(t))),this.parent.postMessage({type:e,data:t},"*")}}(G,window,parent),K=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new n;this.messenger=e,this.callbacks=t,this.messenger.onMessageType("store",this.triggerEvents,this)}triggerEvents(e){var{data:{key:t,value:r}}=e;this.callbacks.call(t,r,t)}once(e,t){return r=>{this.callbacks.delete(e,t),t(r)}}set(e,t){o("store.set",e),this.messenger.send("store",{type:"set",data:{key:e,value:t}})}unset(e){o("store.unset",e),this.messenger.send("store",{type:"unset",data:{key:e}})}get(e,t){if(!t)throw new Error("Portal.store.get requires a callback");o("store.get",e),s("store.get",e),this.callbacks.add(e,this.once(e,t)),this.messenger.send("store",{type:"get",data:{key:e}})}watch(e,t){o("store.watch",e),s("store.watch",e),this.callbacks.has(e)||this.messenger.send("store",{type:"watch",data:{key:e}}),this.callbacks.add(e,t)}unwatch(e,t){o("store.unwatch",e),s("store.unwatch",e),this.callbacks.has(e)||this.messenger.send("store",{type:"unwatch",data:{key:e}}),this.callbacks.delete(e,t)}}(Y),$=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new n;this.messenger=e,this.callbacks=t,this.messenger.onMessageType("menu",this.triggerEvents,this)}triggerEvents(e){this.callbacks.call(e.type)}set(e,t,r){o("menu.set",e),e=e.toString().toLowerCase(),this.callbacks.has(e)||this.messenger.send("menu",{type:"set",data:{name:e,icon:t}}),r&&this.callbacks.add(e,r)}unset(e){o("menu.unset",e),e=e.toString().toLowerCase(),this.messenger.send("menu",{type:"unset",data:{name:e}}),this.callbacks.remove(e)}clear(){this.messenger.send("menu",{type:"clear"})}}(Y),J=new class{constructor(e){this.messenger=e,this.messenger.onMessageType("initialize",this.initialize,this)}initialize(){this.title||this.set(document.title)}set(e){this.title=e,o("title.set",e),this.messenger.send("title",{type:"set",data:{name:e}})}}(Y),X=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new n;this.messenger=e,this.callbacks=t,this.messenger.onMessageType("dialog",this.triggerEvents,this)}triggerEvents(e){var{data:t}=e;console.log(t),this.callbacks.call(t),this.callbacks.purge()}subscribeToCallbacks(e){e.forEach(e=>{this.subscribeToCallback(e)&&this.removeCallbackFromData(e)})}subscribeToCallback(e){var{title:t,callback:r}=e;if(!this.callbacks.has(t))return this.callbacks.add(t,r),!0}removeCallbackFromData(e){e.callback=void 0}show(e){this.callbacks.hasAny()||(this.subscribeToCallbacks(e.buttons),this.messenger.send("dialog",{type:"show",data:e}))}}(Y),Q=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new n;this.messenger=e,this.callbacks=t,this.messenger.onMessageType("popup",this.triggerEvents,this)}triggerEvents(e){var{data:t}=e;this.callbacks.call(t),this.callbacks.purge()}subscribeToCallbacks(e){e.forEach(e=>{this.subscribeToCallback(e)&&this.removeCallbackFromData(e)})}subscribeToCallback(e){var{title:t,callback:r}=e;if(!this.callbacks.has(t))return this.callbacks.add(t,r),!0}removeCallbackFromData(e){e.callback=void 0}show(){var e=[{title:"Close",callback:()=>{}}];this.callbacks.hasAny()||(this.subscribeToCallbacks(e),this.messenger.send("popup",{type:"show",data:e}))}}(Y),Z=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new n;this.messenger=e,this.callbacks=t,this.messenger.onMessageType("trigger",this.triggerEvents,this)}triggerEvents(e){var{type:t,data:r}=e;this.callbacks.call(t,r)}triggerOffEvents(){this.callbacks.removed().forEach(e=>this.messenger.send("off",{type:e}))}on(e,t){o("on",e),s("on",e),this.callbacks.has(e)||this.messenger.send("on",{type:e}),this.callbacks.add(e,t)}off(e,t){this.callbacks.remove(e,t),this.triggerOffEvents(),this.callbacks.purgeRemoved()}trigger(e,t){this.messenger.send("trigger",{type:e,data:t})}}(Y),ee=new class{constructor(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new n;this.messenger=e,this.callbacks=t,this.messenger.onMessageType("flash",this.triggerEvents,this)}triggerEvents(e){var{type:t,data:r}=e;this.callbacks.call(t,r),this.callbacks.purge()}createType(e){return t=>{this.callbacks.call("ignore"),this.callbacks.purge();var r="string"==typeof t?this.basicPayload(e,t):this.payloadWithCallbacks(e,t);this.sendMessage(r)}}basicPayload(e,t){return{type:e,message:t,showConfirm:!1,callbacks:[],confirm:()=>{},dismiss:()=>{},ignore:()=>{},dismissAfter:void 0}}sendMessage(e){this.messenger.send("flash",{type:e.type,message:e.message,dismissAfter:e.dismissAfter,showConfirm:e.showConfirm,callbacks:e.callbacks})}payloadWithCallbacks(e,t){return Object.assign(Object.assign({},this.basicPayload(e,t.message)),{showConfirm:!!t.confirm,dismissAfter:t.dismissAfter,callbacks:this.subscribeToCallbacks({confirm:t.confirm,dismiss:t.dismiss,ignore:t.ignore})})}subscribeToCallbacks(e){return Object.entries(e).reduce((e,t)=>{var[r,n]=t;return"function"==typeof n&&(this.callbacks.add(r,n),e.push(r)),e},[])}callCallback(e){this.callbacks.has(e)?this.callbacks.call(e):console.warn('Flash: attempt to call non-registered callback ("'.concat(e,'")'))}clear(){var e=this;return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{ignore:!1};e.messenger.send("flash",{type:"clear"}),!0===t.ignore&&e.callCallback("ignore"),e.callbacks.purge()}}}(Y);new class{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e;this.window=e,this.overwiteWindowMethods()}overwiteWindowMethods(){var e=this;this.window.onclick=()=>{},this.realOpen=this.window.open,this.window.open=function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return e.openURL.apply(e,[...r]),null}}openURL(e){var t=this.realOpen.call({});t?(t.opener=null,t.location=e):this.window.top.location=e}isHttpLink(e){return e.startsWith("http://")}isExternalUrl(e){return new URL(e).hostname!==this.window.location.hostname}nearestAnchor(e){for(;e&&void 0===e.href;)e=e.parentNode;return e}shouldCapture(e){if(e&&e.href){if(e.target)return!1;if(this.isExternalUrl(e.href)&&this.isHttpLink(e.href))return!0}return!1}normliseIeEvent(e){return e||(e=this.window.event),Object.assign(Object.assign({},e),{target:e.srcElement,preventDefault:()=>{}})}isLeftClick(e){return 0===e.button}clickHandler(e){if(e=this.normliseIeEvent(e),this.isLeftClick(e)){var t=this.nearestAnchor(e.target);if(this.shouldCapture(t))return e.preventDefault(),this.openURL(t.href),!1}}}(window),new class{constructor(e){this.messenger=e,this.messenger.onMessageType("theme",this.triggerThemeChange,this)}triggerThemeChange(e){var{type:t,data:r}=e;this.setTheme(r)}setTheme(e){if(void 0!==window.CSS)if(window.CSS.supports("color","var(--fake-var)"))for(var t in e)e.hasOwnProperty(t)&&this.setCSSVariables(t,e[t]);else this.polyfill(e);else this.polyfill(e)}polyfill(e){q({onlyLegacy:!0,variables:e})}setCSSVariables(e,t){document.documentElement.style.setProperty("--".concat(e),t)}}(Y);Y.send("ready"),H=z={on:Z.on.bind(Z),off:Z.off.bind(Z),trigger:Z.trigger.bind(Z),messenger:Y,store:K,menu:$,flash:{primary:ee.createType("primary"),success:ee.createType("success"),info:ee.createType("info"),danger:ee.createType("danger"),warning:ee.createType("warning"),clear:ee.clear()},dialog:X,popup:Q,title:J.set.bind(J)},window.Portal=z,window.Livestax=H}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,